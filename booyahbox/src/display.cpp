// src/display.cpp
#include "display.h"
#include "hardware/i2c.h"
#include "hardware/gpio.h"
#include "pico/stdlib.h"
#include <cstdio>

#include "ssd1306.h"
#include "textRenderer/TextRenderer.h"
#include "shapeRenderer/ShapeRenderer.h"

// #include "board_setup.h"
// #include "pins.h"     // pour setup_pins()
#include "button_config.h" // pour buttonConfigs[]
// #include "remap.h"
#include "socd.h"     // pour SOCDStrategy & apply_socd_strategy()
// #include "menu.h"     // contient PAGE_*, MODE_*, currentPage, currentMode
// #include "image_layout.h"

using namespace pico_ssd1306;

const uint8_t logo16x16[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x1e, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x1c, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x1c, 0x3c, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x1c, 0x7c, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x78, 0x38, 0x7c, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x58, 0xf8, 0x38, 0x78, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x73, 0xf8, 0x70, 0x78, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xe3, 0xf8, 0x70, 0xff, 0x80, 0x00, 
    0x00, 0x00, 0x00, 0x7f, 0xff, 0xc0, 0x00, 0x00, 0x01, 0x01, 0xe7, 0xf0, 0xf0, 0xfe, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0xff, 0xc3, 0xc0, 0x00, 0x07, 0x83, 0x03, 0xcf, 0xf0, 0xf1, 0xfc, 0x00, 0x00, 
    0x00, 0x00, 0x03, 0xff, 0x03, 0xc0, 0x00, 0x0f, 0xc7, 0x87, 0xcf, 0x70, 0xff, 0xf8, 0x00, 0x00, 
    0x00, 0x00, 0x1f, 0xfe, 0x0f, 0xc1, 0xe0, 0x3f, 0xe7, 0x8f, 0xbe, 0xf1, 0xff, 0xc0, 0x00, 0x00, 
    0x00, 0x00, 0x1f, 0x3e, 0x1f, 0x83, 0xf0, 0x7d, 0xe7, 0x8f, 0xbc, 0xe7, 0xfb, 0xc0, 0x00, 0x00, 
    0x00, 0x00, 0x3e, 0x3c, 0x3f, 0x07, 0xf8, 0x78, 0xe7, 0x1f, 0x7c, 0xfd, 0xf3, 0x80, 0x00, 0x00, 
    0x00, 0x00, 0xf8, 0x7c, 0x7e, 0x0f, 0xf8, 0xf0, 0xef, 0x3e, 0x79, 0xff, 0xc7, 0x80, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x78, 0xfc, 0x1e, 0x78, 0xf1, 0xef, 0x3e, 0x7f, 0xfb, 0xc7, 0x80, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0xf7, 0xe0, 0x3c, 0x79, 0xc1, 0xee, 0xf8, 0xff, 0xe7, 0x8f, 0x80, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0xff, 0xf8, 0x3c, 0x7b, 0xc3, 0xcf, 0xf9, 0xfd, 0xe7, 0x8f, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0xff, 0xfc, 0x78, 0x73, 0x83, 0xdf, 0xf3, 0xf1, 0xef, 0x0f, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0xff, 0xfe, 0x78, 0xf7, 0x83, 0xdf, 0xf3, 0xc1, 0xef, 0x07, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x07, 0xfc, 0x1e, 0xf0, 0xf7, 0x8f, 0x9f, 0xe7, 0x81, 0xee, 0x0e, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x1b, 0xe0, 0x3e, 0xe1, 0xff, 0x8f, 0x0f, 0xc7, 0x81, 0xc2, 0x08, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x03, 0xe0, 0x3f, 0xe1, 0xef, 0x9f, 0x03, 0x8d, 0x01, 0xc4, 0x0c, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x03, 0xc0, 0x7d, 0xe3, 0xef, 0xbe, 0x07, 0x8e, 0x00, 0xc4, 0x08, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x07, 0xc0, 0xfd, 0xc3, 0xcf, 0xfc, 0x07, 0x08, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x07, 0x87, 0xfb, 0xcf, 0x87, 0xf8, 0x1e, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x0f, 0x0f, 0xf3, 0xdf, 0x03, 0xf0, 0x1e, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x0e, 0x1f, 0xe1, 0xfe, 0x03, 0xc0, 0x3c, 0x00, 0x18, 0x07, 0xc0, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x0e, 0x7f, 0x81, 0xfe, 0x00, 0x00, 0x38, 0x70, 0x5c, 0x0f, 0x80, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x1f, 0xfe, 0x00, 0x78, 0x0f, 0xf0, 0x21, 0xfe, 0x7e, 0x1f, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x7f, 0xf8, 0x27, 0xff, 0x3e, 0x3e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x1f, 0xf0, 0x00, 0x01, 0xff, 0xfc, 0x0f, 0xff, 0x3f, 0x7e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x3f, 0xe0, 0x00, 0x07, 0xff, 0xfc, 0x1f, 0x8f, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x3f, 0x80, 0x00, 0x3f, 0xfc, 0x7c, 0x1f, 0x0f, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xf0, 0x00, 0x00, 0xff, 0xc1, 0xfc, 0x3e, 0x0f, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x83, 0xf8, 0x7e, 0x0f, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x87, 0xf0, 0x7c, 0x0f, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x03, 0xcf, 0x0f, 0xe0, 0xf8, 0x1f, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x7f, 0x81, 0xf0, 0x1e, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x01, 0xe0, 0x3e, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xe3, 0xe0, 0x7c, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xf3, 0xe0, 0x7c, 0x7d, 0xf8, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xfb, 0xc0, 0xf8, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0xfb, 0xc1, 0xf1, 0xf0, 0x7c, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x01, 0xfb, 0xc3, 0xf3, 0xe0, 0x3e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x03, 0xfb, 0xc7, 0xe7, 0xc0, 0x1e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x07, 0xf3, 0xcf, 0xcf, 0x80, 0x1a, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x0f, 0xe3, 0xdf, 0x8f, 0x80, 0x0c, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x7f, 0x83, 0xfe, 0x1e, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x03, 0xc1, 0xff, 0x81, 0xfe, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x03, 0xc3, 0xfe, 0x00, 0xf8, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x03, 0x8f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x01, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const uint8_t gear16x16[] = {
    0x01, 0x80, 0x67, 0xe6, 0x7f, 0xfe, 0x38, 0x1c, 0x38, 0x1c, 0x65, 0xa6, 0x62, 0x46, 0xe4, 0x27, 
	0xe4, 0x27, 0x62, 0x46, 0x65, 0xa6, 0x38, 0x1c, 0x38, 0x1c, 0x7f, 0xfe, 0x67, 0xe6, 0x01, 0x80
};

const uint8_t icon_layout[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x08, 0x80, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 
	0x00, 0x00, 0x1c, 0x00, 0x80, 0x00, 0x0b, 0xe0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x00, 0x00, 
	0x00, 0x00, 0x3c, 0x01, 0xc0, 0x00, 0x0a, 0x20, 0x03, 0xe0, 0x00, 0x02, 0x80, 0x82, 0x00, 0x00, 
	0x00, 0x00, 0x7c, 0x03, 0xe0, 0x00, 0x0e, 0x20, 0x00, 0x00, 0x00, 0x02, 0x80, 0x82, 0x00, 0x00, 
	0x00, 0x00, 0x3c, 0x07, 0xf0, 0x00, 0x02, 0x20, 0x03, 0xe0, 0x00, 0x04, 0x40, 0x82, 0x00, 0x00, 
	0x00, 0x00, 0x1c, 0x07, 0xf0, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x04, 0x40, 0x44, 0x0c, 0x70, 
	0x00, 0x00, 0x0c, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x08, 0x20, 0x38, 0x0a, 0x50, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x82, 0x0f, 0xe0, 0x00, 0x0c, 0x30, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x0a, 0x40, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x0a, 0x70, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc4, 0x08, 0xe0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xac, 0x08, 0xa0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xc0, 0x06, 0x60, 0x00, 0x00, 0xc4, 0x08, 0x60, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x20, 0x05, 0x10, 0x00, 0x00, 0xa4, 0x08, 0x80, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x40, 0x06, 0x20, 0x00, 0x00, 0xae, 0x0e, 0xe0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x20, 0x05, 0x10, 0x08, 0x40, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0xc0, 0x05, 0x60, 0x08, 0xc0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x40, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x40, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0xe0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Pas d’objet global, on crée en runtime
static SSD1306* disp_ptr = nullptr;

// Splash management
static absolute_time_t splash_start;
static bool            splash_done = false;

//REMAPPING  variable
static int selected_button = 0;  // index dans ButtonConfig[]
static bool waiting_for_input = false;


// Navigation pages si Config
void check_page_nav() {
    if (currentMode != MODE_CONFIG) return;
    bool left  = !gpio_get(X_LEFT_PIN);
    bool right = !gpio_get(X_RIGHT_PIN);
    static bool nav_active = false;
    if ((left||right) && !nav_active) {
        nav_active = true;
        if (left) {
            currentPage = (currentPage + PAGE_COUNT - 1) % PAGE_COUNT;
        } else {
            currentPage = (currentPage + 1) % PAGE_COUNT;
        }
    } else if (!left && !right) {
        nav_active = false;
    }
}

// Initialisation de l’écran (Core 1)
void init_display() {
    // 1) I²C GP0/GP1
    i2c_init(i2c0, 400000);
    gpio_set_function(SDA_PIN, GPIO_FUNC_I2C);
    gpio_set_function(SCL_PIN, GPIO_FUNC_I2C);
    gpio_pull_up(SDA_PIN);
    gpio_pull_up(SCL_PIN);

    // 2) Création de l’objet SSD1306
    static SSD1306 disp(i2c0, OLED_ADDR, Size::W128xH64);
    disp.clear();
    disp.sendBuffer();
    disp_ptr = &disp;

    // 3) Démarrage du splash
    splash_start = get_absolute_time();
}

void display_task() {
    if (!disp_ptr) return;

    // 1) Gestion du splash screen (3 s)
    auto now = get_absolute_time();
    if (!splash_done &&
        absolute_time_diff_us(splash_start, now) < 3 * 1000000) {
        disp_ptr->clear();
        // drawText(disp_ptr, font_12x16, "BOOYAHBOX", 16, 24);
        disp_ptr->addBitmapImage(0, 0, 128, 64, (uint8_t*)logo16x16);
        disp_ptr->sendBuffer();
        return;
    }
    splash_done = true;

    // 2) Affichage de la page active
    disp_ptr->clear();
    switch (currentPage) {
        case PAGE_SPLASH:
           
            
            // Affiche le logo
            disp_ptr->addBitmapImage(0, 0, 128, 64, (uint8_t*)logo16x16);
            break;

        case PAGE_SOCD:
            // Titre
            drawText(disp_ptr, font_8x8, "Mode SOCD:", 0, 0);

            // Itère sur chaque stratégie
            for (uint8_t i = 0; i < SOCD_COUNT; i++) {
                int y = 12 + i * 12;  // ligne i à 12 px d'écart
                // Curseur '>' si sélectionnée
                if ((uint8_t)current_socd_strategy == i) {
                    drawText(disp_ptr, font_8x8, ">", 0, y);
                }
                // Label à droite du curseur
                drawText(disp_ptr, font_8x8, socd_labels[i], 8, y);
            }
            break;

        case PAGE_INPUT:{
            
            // drawText(disp_ptr, font_8x8, "Input View:", 0, 0);
            const int rmin = 5.5;
            const int rmax = 6.5;
            // Coordonnées personnalisées pour chaque bouton (16)
            const struct { uint8_t x, y, raduis; } pos[BUTTON_COUNT] = {
                {76, 49, rmax}, {102, 14, rmin}, {128, 128, rmin}, {78, 20, rmin}, {90, 15, rmin},   // A, B, C, X, Y
                {128 , 128, rmin}, {82, 32, rmin}, {94, 27, rmin}, {106, 27, rmin}, {115, 18, rmax},   // Z, L1, R1, L2, R2
                {50, 13, rmin}, {67, 13, rmin}, {80, 5, rmin}, {50, 29, rmin}, {67, 29, rmin},  // SELECT, START, HOME, R3, L3,
                {128, 128, rmin}    // CAPTURE, 
            };

            // Labels pour chaque bouton (doivent correspondre à l’ordre dans buttonPins[])
            // const char* labels[BUTTON_COUNT] = {une vari 
            //     "A", "B", "X", "Y", 
            //     "LB", "RB", "LT", "RT", 
            //     "SEL", "STA", "HM", "RS", 
            //     "LS", "CAP", "T1", "T2"  // T1/T2 = réserves
            // };

            drawText(disp_ptr, font_8x8, socd_labels[(uint8_t)current_socd_strategy], 0, 0);

            for (uint8_t i = 0; i < BUTTON_COUNT; i++) {
                bool pressed = !gpio_get(buttonPins[i]);
                uint8_t x = pos[i].x;
                uint8_t y = pos[i].y;
                uint8_t r = pos[i].raduis;

                if (pressed)
                    pico_ssd1306::fillCircle(disp_ptr, x, y, r);
                else
                    pico_ssd1306::drawCircle(disp_ptr, x, y, r);
                // disp_ptr->addBitmapImage( x -4, y -4, 11, 11, (uint8_t*)bitmap_allArray[i],WriteMode::INVERT);
                
                // Dessine le label sous le bouton
                // drawText(disp_ptr, font_5x8, labels[i], x - 4, y + r + 2);!
            }
            // --- Affichage du D-Pad (en croix) ---
        
            if (!gpio_get(Y_UP_PIN))     pico_ssd1306::fillCircle(disp_ptr, 27, 15, rmin);
            else                         pico_ssd1306::drawCircle(disp_ptr, 27, 15, rmin);
        
            if (!gpio_get(Y_DOWN_PIN))   pico_ssd1306::fillCircle(disp_ptr, 41, 49, rmax);
            else                         pico_ssd1306::drawCircle(disp_ptr, 41, 49, rmax);
        
            if (!gpio_get(X_LEFT_PIN))   pico_ssd1306::fillCircle(disp_ptr, 15, 14, rmin);
            else                         pico_ssd1306::drawCircle(disp_ptr, 15, 14, rmin);
        
            if (!gpio_get(X_RIGHT_PIN))  pico_ssd1306::fillCircle(disp_ptr, 39, 20, rmin);
            else                         pico_ssd1306::drawCircle(disp_ptr, 39, 20, rmin);
            
            // disp_ptr->addBitmapImage(-5, -5, 128, 64, (uint8_t*)icon_layout,WriteMode::INVERT);

            break;
        }
        

        // case PAGE_REMAPPING:{
        //     if (get_remap_state() == WAIT_BUTTON) {
        //         drawText(disp_ptr, font_8x8, "Appuie sur un bouton", 0, 0);
        //         drawText(disp_ptr, font_8x8, "un bouton", 0, 20);
        //     }
        //     if (get_remap_state() == CHOOSE_FUNCTION) {
        //         int idx = get_remap_index();
        //         int sel = get_remap_selection();
        //         const char* label_phys = buttonConfigs[idx].label;
        //         const char* label_hid  = buttonConfigs[sel].label;
        //         char numb_pin[4]; // Buffer to hold the string representation
        //         snprintf(numb_pin, sizeof(numb_pin), "%u", buttonConfigs[idx].gpio);
        //         drawText(disp_ptr, font_8x8, "Remap :", 0, 0 );
        //         drawText(disp_ptr, font_8x8, label_phys ,0, 12);
        //         drawText(disp_ptr, font_8x8, numb_pin, 20, 12);
        //         drawText(disp_ptr, font_8x8, ">", 0, 24);
        //         drawText(disp_ptr, font_8x8, label_hid, 24, 24);
        //     }
        //     break;
        // }
        
        // case PAGE_REMAP_WIZARD:{
        //     if (currentPage == PAGE_REMAPPING && bouton_confirmé) {
        //         start_remap_wizard();
        //         currentPage = PAGE_REMAP_WIZARD;
        //     }
        //     if (get_remap_wizard_state() == REMAP_IDLE) {
        //         drawText(disp_ptr, font_8x8, "Remap Wizard", 0, 0);
        //         drawText(disp_ptr, font_8x8, "Appuie sur un bouton", 0, 12);
        //     }
        //     if (get_remap_wizard_state() == REMAP_WAIT_PRESS) {
        //         int i = get_remap_target_index();
        //         if (i >= 0 && i < BUTTON_COUNT) {
        //             drawText(disp_ptr, font_8x8, "Remap Wizard",0, 0);
        //             drawText(disp_ptr, font_8x8, "Appuie pour:",0, 12);
        //             drawText(disp_ptr, font_8x8, buttonConfigs[i].label,0, 24);
        //         }
        //     } else if (get_remap_wizard_state() == REMAP_DONE) {
        //         drawText(disp_ptr, font_8x8, "Remap fini !", 0, 0);
        //     }
        //     break;
        // }

        default:
            break;
    }

    // 3) Flèches de navigation (mode config uniquement)
    if (currentMode == MODE_CONFIG) {
        // drawText(disp_ptr, font_5x8, ">", 0, 0);
        // drawText(disp_ptr, font_5x8, ">", 0, 0);
        disp_ptr->addBitmapImage(112, 0, 16, 16, (uint8_t*)gear16x16);

    }

    disp_ptr->sendBuffer();
}
